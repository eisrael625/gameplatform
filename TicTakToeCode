– Tic Tac Toe Final
function initializeTicTacToe()
    b1T= TTTboard()
    V1 = Vec2(80,200)
    player1= {}
    player2= {}
    turn = 0
    Row3 = {0, 0, 0}
    Row2 = {0, 0, 0}
    Row1 = {0, 0, 0}
    board = {Row1, Row2, Row3}
--board is array of arrays
    winning1=nil
    winning2=nil
    makesure= 0
    TTTRestart= Button2("Main Menu", vec2(0, 0), 20, Vec2(WIDTH/2 -150 , 600),-1 , 200,60)
    TTTReplay= Button2("Play Again", vec2(0, 0), 20, Vec2(WIDTH/2 +150 , 600),-1 , 200,60)
    makesure2=0
end


function RunTicTacToe()

    – This sets a dark background color
    background(40, 40, 50)
    stroke(0)
    noStroke()

    if makesure <20 – once launched properly
    then
        player1= {}
        player2= {}
        turn = 0
        Row3 = {0, 0, 0}
        Row2 = {0, 0, 0}
        Row1 = {0, 0, 0}
        board = {Row1, Row2, Row3}
    end

    makesure=makesure+1
    b1T:draw()
    for i = 1, #player1
    do
        if player1[i] ~= player2[i-1] and player1[i] ~= player2[i-2] and player1[i] ~= player2[i-3] and player1[i] ~= player2[i-4] and player1[i] ~= player2[i-5]
        then
            pushStyle()
            fill(255, 255, 255, 255)
            ellipseMode(CENTER)
            ellipse(player1[i].x * WIDTH/3 - .5* WIDTH/3, player1[i].y *  HEIGHT/3 - .5* WIDTH/3, 100)
            –     print("hi")
            popStyle()
        end
    end
--if new location, drop piece
    for i = 1, #player2
    do
        if player2[i] ~= player1[i-1] and player2[i] ~= player1[i-2] and player2[i] ~= player1[i-3] and player2[i] ~= player1[i-4] and player2[i] ~= player1[i-5]
        then
            pushStyle()
            noStroke()
            fill(255, 0, 0, 255)
            ellipseMode(CENTER)
            ellipse(player2[i].x * WIDTH/3 - .5* WIDTH/3, player2[i].y *  HEIGHT/3 - .5* WIDTH/3, 100)
            –     print("hi")
            popStyle()
        end
    end – if new location, drop piece
   
    if xWin()
    then
        background(0)
        pushStyle()
        fill(255, 0, 0)
        textMode(CENTER)
        font("AmericanTypewriter-Bold")
        fontSize(80)
        text("PLAYER 1 WINS!", WIDTH/2, HEIGHT/2)

        stroke(255,0,0)
        popStyle()
        – strokeWidth(10)
        if makesure2>20
        then
            TTTRestart:draw()
            TTTReplay:draw()
        end
        makesure2=makesure2+1
        if TTTRestart:getState() == 1
        then
            initializeTicTacToe()
            TTTReplay:deselect()
            TicToe:deselect()
            Go:deselect()
            gameMode=0
            TTTRestart:deselect()

            resetAllButtons=true
        end
        if TTTReplay:getState() == 1
        then
            initializeTicTacToe()
            TTTReplay:setState(0)
        end

    end

    if oWin()
    then
        background(0)
        pushStyle()
        fill(255, 0, 0)
        textMode(CENTER)
        font("AmericanTypewriter-Bold")
        fontSize(80)
        text("PLAYER 2 WINS", WIDTH/2, HEIGHT/2)
        popStyle()
        if makesure2>20
        then
            popStyle()
            TTTRestart:draw()
            TTTReplay:draw()
        end
        makesure2=makesure2+1
        if TTTRestart:getState() == 1
        then
            initializeTicTacToe()
            TTTReplay:deselect()
            TicToe:deselect()
            Go:deselect()
            gameMode=0
            TTTRestart:deselect()
            popStyle()

            resetAllButtons=true
        end
        if TTTReplay:getState() == 1
        then
            initializeTicTacToe()
            TTTReplay:setState(0)
            popStyle()
        end
    end

    if #player1 ==5 and xWin ~= true
    then
        background(0)
        pushStyle()
        fill(255, 0, 0)
        textMode(CENTER)
        font("AmericanTypewriter-Bold")
        fontSize(80)
        text("TIE", WIDTH/2, HEIGHT/2)
        popStyle()
        if makesure2>40
        then
            TTTRestart:draw()
            TTTReplay:draw()
        end
        makesure2=makesure2+1
        if TTTRestart:getState() == 1
        then
            initializeTicTacToe()
            TTTReplay:deselect()
            TicToe:deselect()
            Go:deselect()
            gameMode=0
            TTTRestart:deselect()
        end
        if TTTReplay:getState() == 1
        then
            initializeTicTacToe()
            TTTReplay:setState(0)
        end
    end
end

function spaceEmpty()
    empty= true
    for i = 1,100
    do
        –   if currentPos ~= player1[i] or
        if currentPos == player2[i] or currentPos == player1[i]
        then
            empty = false

        end
    end
    return empty
end

function xWin()
    – check all combinations for a win and if one is met, return true

    if board[1][1] == board[1][2] and board[1][2] == board[1][3] and board[1][1] == 1 then      – bottom row
        winning1= vec2(1,1)
        winning2= vec2(3,1)
        return true

    elseif board[2][1] == board[2][2] and board[2][2] == board[2][3] and board[2][1] == 1 then  – middle row
        winning1= vec2(1,2)
        winning2= vec2(3,2)
        return true

    elseif board[3][1] == board[3][2] and board[3][2] == board[3][3] and board[3][1] == 1 then  – top row
        winning1= vec2(1,3)
        winning2= vec2(3,3)
        return true

    elseif board[1][1] == board[2][1] and board[2][1] == board[3][1] and board[1][1] == 1 then  – left column
        winning1= vec2(1,1)
        winning2= vec2(1,3)
        return true
    elseif board[1][2] == board[2][2] and board[2][2] == board[3][2] and board[1][2] == 1 then  – center column
        winning1= vec2(2,1)
        winning2= vec2(2,3)
        return true
    elseif board[1][3] == board[2][3] and board[2][3] == board[3][3] and board[1][3] == 1 then  – right column
        winning1= vec2(3,1)
        winning2= vec2(3,3)
        return true
    elseif board[1][1] == board[2][2] and board[2][2] == board[3][3] and board[1][1] == 1 then  – diagonal (+slope)
        winning1= vec2(1,1)
        winning2= vec2(3,3)
        return true
    elseif board[1][3] == board[2][2] and board[2][2] == board[3][1] and board[3][1] == 1 then  – diagonal (-slope)
        winning1= vec2(1,3)
        winning2= vec2(3,1)
        return true
    else
        return false
    end
    print("x")
end

function oWin()
    – check all combinations for a win and if one is met, return true

    if board[1][1] == board[1][2] and board[1][2] == board[1][3] and board[1][1] == -1 then      – bottom row
        return true
    elseif board[2][1] == board[2][2] and board[2][2] == board[2][3] and board[2][1] == -1 then  – middle row
        return true
    elseif board[3][1] == board[3][2] and board[3][2] == board[3][3] and board[3][1] == -1 then  – top row
        return true
    elseif board[1][1] == board[2][1] and board[2][1] == board[3][1] and board[1][1] == -1 then  – left column
        return true
    elseif board[1][2] == board[2][2] and board[2][2] == board[3][2] and board[1][2] == -1 then  – center column
        return true
    elseif board[1][3] == board[2][3] and board[2][3] == board[3][3] and board[1][3] == -1 then  – right column
        return true
    elseif board[1][1] == board[2][2] and board[2][2] == board[3][3] and board[1][1] == -1 then  – diagonal (+slope)
        return true
    elseif board[1][3] == board[2][2] and board[2][2] == board[3][1] and board[3][1] == -1 then  – diagonal (-slope)
        return true
    else
        return false
    end
    print("o")
end
